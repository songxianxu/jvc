#!/usr/bin/env bash

# TODO:

# Revise load logic, same as install. jvc load 1.5 julia-1.5 => julia-1.5.newest locally
# Add full Mac support
# Add secure protocols for download
# Fix path double slash (double slash behavior imposed by ln -sf)
# Add test 
# HTTP error code for download
# Better download 

source "$(dirname "$0")/.jvcrc"
JULIA_DOWNLOAD_DIR=${JULIA_DOWNLOAD_DIR%/}
JULIA_INSTALL_DIR=${JULIA_INSTALL_DIR%/}
JULIA_SYMLINK_DIR=${JULIA_SYMLINK_DIR%/}
JVC_DIR="$(dirname "$0")"
JVC_VERSION="0.3.0"


# Check ANSI support
# Rustup: https://github.com/rust-lang/rustup/blob/master/rustup-init.sh
# screen ?
jvc_has_ansi() {
  if [ -t 2 ]; then
    if [ "${TERM+set}" = 'set' ]; then
      case "$TERM" in
        xterm*|rxvt*|urxvt*|linux*|vt*|st*|screen*)
          return 0
          ;;
      esac
    fi
  fi
  return 3
}

jvc_has() {
  type "${1-}" > /dev/null 2>&1
}

# Basic std
jvc_echo() {
  command printf %s\\n "$*" 2>/dev/null
}

jvc_get_style() {
  case "$1" in 
    bold)
      echo 1
      ;;
    *)
      echo 0
  esac 
}

jvc_get_style_color() {
  local style
  style=$(jvc_get_style "$1")
  case "$2" in
    0) # black
      printf "\033[${style};30m%s\033[0m\n"  
      ;;
    1) # red 
      printf "\033[${style};31m%s\033[0m\n"       
      ;;
    2) # green 
      printf "\033[${style};32m%s\033[0m\n"    
      ;;
    3) # yellow 
      printf "\033[${style};33m%s\033[0m\n"  
      ;;
    4) # blue 
      printf "\033[${style};34m%s\033[0m\n"   
      ;;
    5) # magenta
      printf "\033[${style};35m%s\033[0m\n"
      ;;
    6) # cyan 
      printf "\033[${style};36m%s\033[0m\n" 
      ;;
    7) # white 
      printf "\033[${style};37m%s\033[0m\n"
      ;;
    *) 
      printf "\033[${style}m%s\033[0m\n"
      ;;
  esac
}

jvc_log() {
  local style
  local color
  local tag 
  [ -n "$1" ] && style=$(tput "$1") || style=""
  [ -n "$2" ] && color=$(tput setaf "$2") || color=""
  tag="${3}"
  if jvc_has "tput"; then
    command printf "${color}${style}%s $(tput sgr0)\n" "${tag}${4:-}" 2>/dev/null
  elif jvc_has_ansi; then
    local style_and_color
    style_and_color=$(jvc_get_style_color "${1}" "${2}")
    command printf "${style_and_color}" "${tag}${4:-}" 2>/dev/null
  fi
}


jvc_warn() {
  jvc_log "bold" "3" "Warning: " "$*"
}

jvc_done() {
  jvc_log "bold" "2" "" "$*"
  # bold=$(command tput bold)
  # command printf "\e[32m${bold}%s\e[m\\n" "$*" 2>/dev/null
}

jvc_err() {
  jvc_log "bold" "1" "Error: " "$*"
  # bold=$(command tput bold)
  # command printf "\e[31m${bold}Error: %s\e[m\\n" "$*" 2>/dev/null
}


# Unable to track
jvc_has_julia_installed() {
  if [ -n "$(command -v julia)" ]; then
    return 0
  else 
    return 1
  fi
}

# Check semver
# https://github.com/T5CC/semver-regex
# There is some issue with the regex provided by semver.org
jvc_is_semver() {
  local semver
  semver="^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-((0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)){0,1}(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)){0,1}$"
  echo "$1" | grep -qE "${semver}"
}

jvc_is_major() {
  echo "$1" | grep -qE "^(0|[1-9]\d*)$"
}

jvc_get_major() {
  if [ "$1" = "nightly" ]; then
    local major_version
    major_version=$(ls "$JULIA_INSTALL_DIR/julia-nightly/" | grep -Eo "([[:digit:]]\.[[:digit:]])")
    echo "$major_version"
  else
    echo "$1" | cut -d '.' -f 1,2
  fi
}

jvc_is_major_minor() {
  echo "$1" | grep -qE "^(0|[1-9]\d*)\.(0|[1-9]\d*)$"
}

jvc_is_major_minor_patch() {
  echo "$1" | grep -qE "^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$"
}

jvc_is_nightly() {
  echo "$1" | grep -qE "^nightly$"
}

jvc_check_version() {
  if jvc_is_major "$1"; then  
    return 0 
  elif jvc_is_major_minor "$1"; then
    return 0 
  elif jvc_is_major_minor_patch "$1"; then
    return 0 
  elif jvc_is_semver "$1"; then
    return 0
  elif jvc_is_nightly "$1"; then
    return 0
  else
    jvc_err "Unsupported version format." 
    return 1
  fi
}


jvc_check_null() {
  if [ -n "$1"  ]; then
    return 0
  else 
    jvc_err "$2"
    exit 1
  fi
}

# Enhanced security proto?
jvc_cuget() {
  if jvc_has curl; then
    # echo "curl --silent --proto --tlsv1.2 '=https' "
    echo "curl --silent"
  elif jvc_has wget; then
    # echo "wget -qO- --https-only --secure-protocol=TLSv1_2" 
    echo "wget -qO- --https-only" 
  else 
    jvc_err "Either curl or wget is required."
  fi
}


# https://unix.stackexchange.com/questions/614299/how-to-split-a-string-by-character-in-bash-zsh
jvc_split() { 
  local IFS="$2"
  set -o noglob
  eval "$3"'=( $1"")'
}

# delimiter $1
# Input string $2
jvc_split2() {
  local delimiter
  local input
  delimiter=$1
  input=$2
  awk -F"$delimiter" '{for (i=1;i<=NF;i++) print $i}' <<< "$input"
}

# Get latest_version
# https://gist.github.com/lukechilds/a83e1d7127b78fef38c2914c4ececc3c
# deprecated
jvc_get_latest_version() {
  basename "$(curl -fs -o/dev/null -w '%{redirect_url}' "$1"/releases/latest)" | cut -c2-
}

jvc_get_nightly_url() {
  local sys=$1
  local full_arch=$2
  # [[ $full_arch == *"64" ]] && arch=x64 || arch=x32
  if echo "$full_arch" | grep -qE "^*64"; then
    arch="x64"
  else
    arch="x32"
  fi
  echo "https://julialangnightlies-s3.julialang.org/bin/$sys/$arch/julia-latest-${sys}64.$JVC_SUFFIX"
}


# TODO This is rather ugly...
jvc_get_lts_release() {
  jvc_echo "Querying long-term support release..."
  INSTALLING_VER=$($(jvc_cuget) "https://julialang.org/downloads/" | grep -oE "Long-term support.{0,23}" | awk -F": v" '{print $2}' | xargs)
  jvc_echo "Current long-term support version is $INSTALLING_VER."
}


jvc_get_rc_release() {
  jvc_echo "Querying latest release candidate..."
  INSTALLING_VER=$(jvc available all | grep "rc" | head -n 1 | xargs)
  jvc_echo "Current release candidate is $INSTALLING_VER."
}


# deprecated
jvc_get_upstream_url() {
  local upstream_name
  upstream_name="$1"
  curl -s "https://raw.githubusercontent.com/johnnychen94/jill.py/master/jill/config/sources.json" | awk "/$1/ {getline; getline; getline; print}"  | xargs
}

jvc_get_upstream_local() { 
  local upstream_name
  upstream_name="$1"
  if [ -f  "$JVC_DIR/upstream.conf" ]; then
    awk "/$upstream_name/{flag=1;next} /Name/{flag=0} flag" "$JVC_DIR/upstream.conf" | grep "URL" | cut -d"=" -f2- | xargs 
  else
    jvc_err "Upstream config file upstream.conf is missing"
    exit 1
  fi
}


jvc_get_upstream_bin_url(){
  local upstream_name=$1
  jvc_get_upstream_url "$upstream_name" | awk -F'$' '{print $1}'
}


jvc_get_upstream_bin_local(){
  local upstream_name=$1
  jvc_get_upstream_local "$upstream_name" | awk -F'$' '{print $1}'
}

jvc_get_upstream_list_local(){
  local upstream_info
  if [ -f "$(dirname "$0")/upstream.conf" ]; then
    awk '/#/ {if (x) print x; x= ""}{x=(!x)?$0:x","$0;}END{print x;}' "$(dirname "$0")/upstream.conf" |  awk -F"[,/=/#]" '{print $4 ": " $2 ","}' | awk '{$1=$1;print}'

  else
    jvc_err "Upstream config file upstream.conf is missing"
    exit 1
    fi
  }


#deprecated
jvc_get_upstream_list(){
  # curl -s "https://raw.githubusercontent.com/johnnychen94/jill.py/master/jill/config/sources.json" | awk '/"name"/ {print p " " $0 }{p=$0} ' | awk -F: '{print $1 ": " $3}' | tr -d '"' | awk '{$1=$1;print "  " NR ". " $0}'  
  local upstream_info
  upstream_info=$(curl -s -L "https://raw.githubusercontent.com/johnnychen94/jill.py/master/jill/config/sources.json" 2>/dev/null || echo $?)
  # curl -s "https://raw.githubusercontent.com/johnnychen94/jill.py/master/jill/config/sources.json" | awk '/"name"/ {print p " " $0 }{p=$0} ' | awk -F: '{print $1 ": " $3}' | tr -d '"' | awk '{$1=$1;print $0}'  
  echo "$upstream_info" | awk '/"name"/ {print p " " $0 }{p=$0} ' | awk -F: '{print $1 ": " $3}' | tr -d '"' | awk '{$1=$1;print $0}'  
}



jvc_get_version_from_json() {
  local json_dir
  # json_dir=$(dirname "$0")
  json_dir=$1
  VersionList=$(awk '/files/ {print line} {line =$0}' "$json_dir"/versions.json \
    | awk -F: '{print $1}')

  for version in "${VersionList[@]}"; do 
    echo "$version"
  done
}


jvc_get_version_from_json_online() {
  local versions
  local upstream_url
  upstream_url="$(jvc_get_upstream_bin_local "$UPSTREAM_NAME")"
  versions=$($(jvc_cuget) "${upstream_url}versions.json" | awk '/files/ {print line} {line =$0}' | awk -F: '{print $1}')
  # versions=$(curl -s "${upstream_url}versions.json" | awk '/files/ {print line} {line =$0}' | awk -F: '{print $1}')
  # versions=$(wget -O- -q "${upstream_url}versions.json" | awk '/files/ {print line} {line =$0}' | awk -F: '{print $1}')
  for version in "${versions[@]}"; do 
    echo "$version"
  done
}

# jvc_get_version_from_json_online

jvc_ls_stable() {
  version_list=$(jvc_get_version_from_json_online)
  echo "${version_list[@]}" | grep -Ev "rc|alpha|beta"  | tr -d '"' | sort -r 
}

jvc_ls_all() {
  version_list=$(jvc_get_version_from_json_online)
  echo "  nightly"
  echo "${version_list[@]}" | tr -d '"' | sort -r
}

# Query the version file
jvc_query_latest_stable() {
  # echo "Querying lastest Julia version ..."
  # INSTALLING_VER=$(jvc_get_latest_version https://github.com/JuliaLang/julia)
  # echo "Latest stable version is $INSTALLING_VER"
  # Above should be the preferrable way but probably give up due to some funny issues:)
  echo "Querying lastest Julia version ..."
  INSTALLING_VER=$(jvc available | head -n 1 | xargs)
  if [ -z "$INSTALLING_VER" ]; then 
    jvc_err "Fail to query the lastest version"
    exit 1
  fi
  echo "Latest stable version is $INSTALLING_VER"
  # Any better idea?
}   


jvc_search() {
  echo Querying Julia version "$1" ...
  # Clean the raw version input
  local version_raw
  version_raw="$1"
  local version_tmp
  jvc_split "$version_raw" . version_tmp
  if [ -z "${version_tmp[1]}" ] || [ -z "${version_tmp[2]}" ] ; then 
    has_exact_version=0
  else 
    has_exact_version=1
  fi

  if [ -z "${version_tmp[1]}" ]; then 
    version_tmp[1]="[[:digit:]]" 
  fi 
  if [ -z "${version_tmp[2]}" ]; then 
    version_tmp[2]="[[:digit:]]" 
  fi 
  # Clean the input for version query
  # Error check repetition
  local version_tmp
  version_tmp="${version_tmp[0]}\\.${version_tmp[1]}\\.${version_tmp[2]}"

  version_list=$(jvc_get_version_from_json_online)
  # Grep all 
  matched_version=$(printf -- '%s\n'  "$version_list" | grep -E "$version_tmp" | sort -r | tr -d '"')
  # Grep stable version only
  matched_version_stable=$(printf -- '%s\n'  "$version_list" | grep -Ev "rc|beta|alpha" | grep -E "$version_tmp" | sort -r | tr -d '"')
  # Grep stable version only
  matched_version_rc=$(printf -- '%s\n'  "$version_list" | grep -E "$version_tmp" | grep -E "rc|beta|alpha" | sort -r | tr -d '"')

  ask_for_rc=$(echo "$version_raw" | grep -cE "rc|beta|alpha" )

  if [ $has_exact_version == 1 ]; then
    if [ -n "$matched_version" ]; then
      if [ -n "$matched_version_stable" ]; then
        echo "Available versions found:"
        printf -- '%s\n' "${matched_version_stable[@]}"
      elif [ -n "$matched_version_rc" ]; then
        if [ "$ask_for_rc" == 1 ] ; then
          echo "Available versions found:"
          printf -- '%s\n' "${matched_version_rc[@]}"
        else 
          echo "Available versions found:"
          jvc_warn "Only rc or beta version are available"
          printf -- '%s\n' "${matched_version_rc[@]}"
        fi
      fi
    else 
      # echo "Error: Unknown version is given: $1"
      jvc_err "Unknown version is given: $1"
      exit
    fi
  else 
    if [ -n "$matched_version" ]; then
      if [ -n "$matched_version_stable" ]; then
        echo "Available versions found:"
        printf -- '%s\n' "${matched_version_stable[@]}"
      elif [ -n "$matched_version_rc" ]; then
        echo "Available versions found:" 
        # echo Warning: Only rc or beta version are found.
        jvc_warn "Only rc or beta version are available"
        printf -- '%s\n' "${matched_version_rc[@]}"
      fi
    else 
      # echo "Error: version given not found: $1"
      jvc_err "Unknown version is given: $1"
      exit
    fi
  fi
}




jvc_query_version_json() {
  echo "Querying Julia version $1 ..."
  # Clean the raw version input
  local version_raw
  version_raw=$1
  local version_tmp

  jvc_split "$version_raw" . version_tmp
  if [ -z "${version_tmp[1]}" ] || [ -z "${version_tmp[2]}" ] ; then 
    has_exact_version=0
  else 
    has_exact_version=1
  fi

  if [ -z "${version_tmp[1]}" ]; then 
    version_tmp[1]="[[:digit:]]" 
  fi 
  if [ -z "${version_tmp[2]}" ]; then 
    version_tmp[2]="[[:digit:]]" 
  fi 
  # Clean the input for version query
  local version_tmp
  version_tmp="${version_tmp[0]}\\.${version_tmp[1]}\\.${version_tmp[2]}"

  version_list=$(jvc_get_version_from_json_online)
  local matched_version
  local matched_version_stable
  local matched_version_rc
  # Grep all 
  matched_version=$(printf -- '%s\n'  "$version_list" | grep -E "$version_tmp" | sort -r | tr -d '"')
  # Grep stable version only
  matched_version_stable=$(printf -- '%s\n'  "$version_list" | grep -Ev "rc|beta|alpha" | grep -E "$version_tmp" | sort -r | tr -d '"')
  # Grep stable version only
  matched_version_rc=$(printf -- '%s\n'  "$version_list" | grep -E "$version_tmp" | grep -E "rc|beta|alpha" | sort -r | tr -d '"')

  ask_for_rc=$(echo "$version_raw" | grep -cE "rc|beta|alpha" )

  # Given exact version number e.g. 1.1.1 
  if [ $has_exact_version == 1 ]; then
    # If there is matched exact version
    if [ -n "$matched_version" ]; then
      # If there is macthed stable version
      if [ -n "$matched_version_stable" ]; then
        echo "Available versions found:"
        printf -- '%s\n' "$matched_version_stable"
        echo Selecting version "$1" ... 
        INSTALLING_VER=$1
        # If there is macthed rc version
      elif [ -n "$matched_version_rc" ]; then
        # If specifically asked for rc
        if [ "$ask_for_rc" == 1 ] ; then
          echo "Available versions found:"
          printf -- '%s\n' "$matched_version_rc"
          echo Selecting version "$1" ... 
          INSTALLING_VER=$(printf "%s\n" "$matched_version_rc" | head -n1 | xargs)
          # printf "Selecting version %s by default\n" "$INSTALLING_VER"

        # If ones does not ask for rc but there is no stable version and only rc
      else 
        echo "Available versions found:"
        # echo Warning: Only rc or beta version are available.
        jvc_warn "Only rc or beta version are available."
        printf -- '%s\n' "$matched_version_rc"
        INSTALLING_VER=$(printf "%s\n" "$matched_version_rc" | head -n1 | xargs)
        printf "Selecting version %s by default\n" "$INSTALLING_VER"
        fi
      fi
    else 
      jvc_err "Unknown version is given: $1"
      exit
    fi
  else 
    if [ -n "$matched_version" ]; then
      if [ -n "$matched_version_stable" ]; then
        echo "Available versions found:"
        printf -- '%s\n' "${matched_version_stable[@]}"
        INSTALLING_VER=$(printf "%s\n" "$matched_version_stable" | head -n1 | xargs)
        printf "Installing version %s by default\n" "$INSTALLING_VER"
      elif [ -n "$matched_version_rc" ]; then
        echo Available versions found: 
        jvc_warn "Only rc or beta version are available."
        printf -- '%s\n' "${matched_version_rc[@]}"
        INSTALLING_VER=$(printf "%s\n" "$matched_version_rc" | head -n1 | xargs)
        printf "Installing version %s by default\n" "$INSTALLING_VER"
      fi
    else 
      jvc_err "Unknown version is given: $1"
      exit
    fi
  fi
}




jvc_get_version() {
  case "${1:-stable}" in 
    stable)
      jvc_query_latest_stable 
      ;;
    nightly)
      [ ! "$UPSTREAM_NAME" = "Official" ]  && jvc_warn "Nightly release is only available for Official upstream."
      INSTALLING_VER=nightly
      ;;
    rc)
      jvc_get_rc_release
      ;;
    lts)
      jvc_get_lts_release
      ;;
    *)
      jvc_check_version "$1" || exit 9 
      jvc_query_version_json "$1" 
      ;;
  esac
}


jvc_get_url_from_sys_arch_version() {
  local sys
  local full_arch
  local arch
  local version
  local suffix
  sys="$1"
  full_arch="$2"
  version="$3"
  suffix="$4"
  if echo "$full_arch" | grep -qE "^.*64"; then
    arch="x64"
  else
    arch="x32"
  fi
  case "$version" in 
    "nightly")
      echo "https://julialangnightlies-s3.julialang.org/bin/$sys/$arch/julia-latest-${sys}64.$suffix"
      ;;
    *)
      local minor_version
      minor_version=$(echo "$version" | cut -d. -f1-2 | cut -d- -f1)
      local url
      url=$(jvc_get_upstream_local "$UPSTREAM_NAME")
      local filename
      filename="$(jvc_generate_filename "$sys" "$full_arch" "$version")"
      eval "echo $url"
  esac
}

jvc_get_sys_info() {
  JVC_SYS=$(uname -s | tr '[:upper:]' '[:lower:]')
  JVC_ARCH=$(uname -m)
  case $JVC_SYS in
    "linux")
      JVC_SUFFIX="tar.gz"
      ;;
    "darwin")
      JVC_SUFFIX="dmg"
      JVC_SYS="mac"
      ;;
    "freebsd")
      JVC_SUFFIX="tar.gz"
      ;;
  esac 
}



jvc_generate_filename() {
  local sys
  local full_arch
  local version
  sys=$1
  full_arch=$2
  version=$3
  local filename
  case $sys in
    "linux")
      filename="julia-$version-$sys-$full_arch.tar.gz"
      ;;
    "mac")
      filename="julia-$version-mac64.dmg"
      ;;
    "freebsd")
      filename="julia-$version-$sys-$full_arch.tar.gz"
      ;;
  esac 
  echo "$filename"
}

jvc_confirm2() { 
  printf "%s" "$2"
  read -r  choice
  case "${choice:-$1}" in 
    y|Y|yes ) return 0 
      ;;
    n|N|no ) echo "Aborted."  
      exit 0 
      ;; 
    * ) echo "Invalid input, please enter yes or no."
      exit 8 
      ;;
  esac
}

jvc_checkfolder() { #$1 action #2 Dir
  local action
  action=$1
  local dir
  dir=$2
  echo "Trying to $action to $dir"
  if [ ! -d "$dir" ]; then 
    echo "> Default $action folder  \"$dir\" is not a valid path."
    if jvc_confirm2 "Y" "> Do you want to create the folder $dir ? (Y/n) "; then
      mkdir -p "$dir"
    fi
    # printf "> Do you want to create the folder \"%s\" ? (y/n) " "$dir"
    # read -r  reply 
    # if [[ ! $reply =~ ^[Yy] ]]; then 
    #   echo Aborted 
    # exit 1
    # else 
    # mkdir -p "$dir"
    # fi
  fi
}




# Reference from: nvm_compute_check_sum 
#Input: filename, e.g., julia-1.4.1.tar.gz
jvc_compute_checksum() {
  local julia_tarball
  julia_tarball="${1-}"
  if [ -z "$julia_tarball" ]; then 
    echo "Provided file to checksum is empty." 
  elif ! [ -f "$julia_tarball" ]; then 
    echo "Provided file to checksum does not exist."
  fi
  # Use sha256sum only
  if jvc_has "sha256sum"; then
    sha256sum "$julia_tarball" | awk '{print $1}'
  elif jvc_has "shasum"; then
    shasum -a 256 "$julia_tarball" | awk '{print $1}'
  elif jvc_has "sha256"; then 
    sha256 -q 256 "$julia_tarball" | awk '{print $1}'
  elif jvc_has "gsha256sum"; then
    gsha256sum "$julia_tarball" | awk '{print $1}'
  fi
}

jvc_get_remote_checksum() {
  local version
  version=$1 
  local julia_remote_tarball
  julia_remote_tarball=$(jvc_generate_filename "$JVC_SYS" "$JVC_ARCH" "$version")
  local checksum_url
  # checksum_url=$(jvc_get_upstream_bin_url "$UPSTREAM_NAME")
  checksum_url=$(jvc_get_upstream_bin_local "$UPSTREAM_NAME")

  local remote_checksum
  remote_checksum=$($(jvc_cuget) "${checksum_url}checksums/julia-$version.sha256" | grep "$julia_remote_tarball")
  echo "$remote_checksum" | cut -d " " -f1
}



jvc_compare_checksum() {
  local version
  local filename
  version="$1"
  filename="$2"
  if [ "$version" = "nightly" ]; then
    jvc_warn "Nightly installation will skip checksum as the it is not provided."
    return 0
  fi
  local julia_tarball
  julia_tarball="$JULIA_DOWNLOAD_DIR/$filename"
  if [ -z "$julia_tarball" ]; then 
    jvc_err "Provided file to checksum is empty." 
    return 1
  elif ! [ -f "$julia_tarball" ]; then 
    jvc_err "Provided file to checksum does not exist."
    return 1
  fi

  local computed_sum
  computed_sum=$(jvc_compute_checksum "$julia_tarball")
  local checksum
  checksum="$(jvc_get_remote_checksum "$version")"
  if [ -z "${checksum}" ]; then 
    jvc_err "Provided checksum to compare is empty"
    # jvc_confirm2 "N" "Continue [y/N] ?"
    return 1
  fi
  if [ -z "${computed_sum}" ]; then 
    echo "Computed checksum of '$julia_tarball' is empty."
    jvc_warn "Continue without checksum verification. "
    return 0 
  elif [ "${computed_sum}" != "${checksum}" ]; then 
    jvc_err "checksums do not match: '${computed_sum}' found, '${checksum}' is expected"
    return 1
  fi
  jvc_done "Checksum matches with remote from upstream [$UPSTREAM_NAME] for version $version"
  return 0
}

# $1 url $2 version
jvc_download_tarball_curl() {
  local url
  local version
  local filename
  url="$1"
  version="$2"
  filename="julia-$version.$JVC_SUFFIX"
  if  [ ! -f "$JULIA_DOWNLOAD_DIR/$filename" ]; then
    echo " Downloading from $url"
    if curl --progress-bar --compressed "$url" --output "$JULIA_DOWNLOAD_DIR/$filename"; then
      jvc_compare_checksum "$version" "$filename"
      jvc_done "Downloading finished."
    else 
      echo " Download fails. Please check your connection."
      rm "$filename" 
    fi
  else
    jvc_warn "The binary for julia $version is already downloaded as $JULIA_DOWNLOAD_DIR/$filename"

    if jvc_compare_checksum "$version" "$filename"; then
      return 0
    else
      jvc_warn "This may due to an incomplete download occurence."
      if jvc_confirm2 "Y" "Do you want to remove it and redownload? [Y/n] "; then
        rm -i "$JULIA_DOWNLOAD_DIR/$filename"
        jvc_download_tarball_curl "$url" "$version" "$suffix"
      fi
    fi
  fi
}


# $1 url $2 version
jvc_download_tarball_wget() {
  local url
  local version
  local filename
  url="$1"
  version="$2"
  filename="julia-$version.$JVC_SUFFIX"
  if  [ ! -f "$JULIA_DOWNLOAD_DIR/$filename" ]; then
    echo " Downloading from $url"
    echo -n "    "
    # Check show-progress support 
    local progress_opt
    wget --help | grep -q '\--show-progress' && progress_opt="-q --show-progress --progress=bar:noscroll" || progress_opt="--progress=bar:noscroll"
    if wget ${progress_opt} -c "${url}" -O "$JULIA_DOWNLOAD_DIR/$filename"; then
      jvc_compare_checksum "$version" "$filename"
      jvc_done "Downloading finished."
    else 
      echo " Download fails with error code $?. Please check your connection."
      [ -e "$JULIA_DOWNLOAD_DIR/$filename" ] && rm -f "$JULIA_DOWNLOAD_DIR/$filename"
    fi
  else
    jvc_warn "The binary for julia $version is already downloaded as $JULIA_DOWNLOAD_DIR/$filename"
    if jvc_compare_checksum "$version" "$filename"; then
      return 0
    else
      jvc_warn "This may due to an incomplete download occurence."
      if jvc_confirm2 "Y" "Do you want to remove it and redownload? [Y/n] "; then
        rm -i "$JULIA_DOWNLOAD_DIR/$filename"
        jvc_download_tarball_wget "$url" "$version" 
      fi
    fi
  fi
}


# jvc download_tarball url version
jvc_download_tarball() {
  local url 
  local version
  url="$1"
  version="$2"
  if jvc_has "wget"; then
    jvc_download_tarball_wget "$url" "$version" 
  elif jvc_has "curl"; then
    jvc_download_tarball_curl "$url" "$version" 
  else 
    jvc_err "Either wget or curl is required for downloading."
  fi
}

# jvc_extract version
jvc_extract() {
  local version
  version="$1"
  if [ "$version" = "nightly" ]; then
    if tar xzf "$JULIA_DOWNLOAD_DIR/julia-nightly.tar.gz" -C "$JULIA_INSTALL_DIR/julia-nightly" --totals --strip-components=1; then
      jvc_done "Extraction completed."
    else
      jvc_err "Extaction failed."
    fi
  else
    if tar xzf "$JULIA_DOWNLOAD_DIR/julia-$version.tar.gz" -C "$JULIA_INSTALL_DIR" --totals; then
      jvc_done "Extraction completed."
    else
      jvc_err "Extaction failed."
    fi
  fi
}

# Mac version of extract
jvc_mount() {
  local version
  version="$1"
  if [ "$version" = "nightly" ]; then
    if hdiutil attach "$JULIA_DOWNLOAD_DIR/julia-nightly.dmg" -quiet -mount required -mountpoint "$JULIA_DOWNLOAD_DIR/julia-nightly"; then 
      local major_version
      major_version=$(ls "$JULIA_DOWNLOAD_DIR/julia-nightly/" | grep -Eo "([[:digit:]]\.[[:digit:]])")
      cp -R "$JULIA_DOWNLOAD_DIR/julia-nightly/Julia-$major_version.app" "$JULIA_INSTALL_DIR/julia-$version/"
      jvc_done "Extraction completed."
      hdiutil unmount "$JULIA_DOWNLOAD_DIR/julia-nightly"
    else
      jvc_err "Extaction failed."
    fi
  else
    if hdiutil attach "$JULIA_DOWNLOAD_DIR/julia-$version.dmg" -quiet -mount required -mountpoint "$JULIA_DOWNLOAD_DIR/julia-$version"; then
      local major_version
      major_version=$(jvc_get_major "$version")
      cp -R "$JULIA_DOWNLOAD_DIR/julia-$version/Julia-$major_version.app" "$JULIA_INSTALL_DIR/julia-$version/"
      jvc_done "Extraction completed."
      hdiutil unmount "$JULIA_DOWNLOAD_DIR/julia-$version"
    else
      jvc_err "Extaction failed."
    fi
  fi
}


# jvc_link version
jvc_link() {
  local version
  version="$1"
  echo Creating symbolic link julia-"$version" in "$JULIA_SYMLINK_DIR"
  jvc_checkfolder "create_symlink" "$JULIA_SYMLINK_DIR"
  ln -sf "$JULIA_INSTALL_DIR"/julia-"$version"/bin/julia "$JULIA_SYMLINK_DIR"/julia-"$version"
}

# jvc_link version
jvc_link_mac() {
  local version
  version="$1"
  if [ "$version" = "nightly" ]; then
    echo Creating symbolic link julia-"$version" in "$JULIA_SYMLINK_DIR"
    jvc_checkfolder "create_symlink" "$JULIA_SYMLINK_DIR"
    local major_version
    major_version=$(ls "$JULIA_INSTALL_DIR/julia-nightly/" | grep -Eo "([[:digit:]]\.[[:digit:]])")
    ln -sf "$JULIA_INSTALL_DIR/julia-$version/Julia-$major_version.app/Contents/Resources/julia/bin/julia" "$JULIA_SYMLINK_DIR/julia-$version"
  else
    echo Creating symbolic link julia-"$version" in "$JULIA_SYMLINK_DIR"
    jvc_checkfolder "create_symlink" "$JULIA_SYMLINK_DIR"
    local major_version
    major_version=$(jvc_get_major "$version")
    ln -sf "$JULIA_INSTALL_DIR"/julia-"$version"/Julia-"$major_version".app/Contents/Resources/julia/bin/julia "$JULIA_SYMLINK_DIR"/julia-"$version"
  fi
}


has_symlink_version() {
  local version
  version=$1
  local symlink_version_dir
  symlink_version_dir=$JULIA_SYMLINK_DIR/julia-$version
  [ -L "$symlink_version_dir" ]  
}

has_broken_symlink_version() {
  local version
  version=$1
  local symlink_version_dir
  symlink_version_dir=$JULIA_SYMLINK_DIR/julia-$version
  [ ! -e "$symlink_version_dir" ]  
}


jvc_load() {
  local version
  version=$1
  local bin_julia
  if [ "$JVC_SYS" = "mac" ]; then
    bin_julia="$JULIA_INSTALL_DIR/julia-$version/Julia-$(jvc_get_major "$version").app/Contents/Resources/julia/bin/julia"
  else
    bin_julia="$JULIA_INSTALL_DIR/julia-$version/bin/julia"
  fi
  if $(has_symlink_version "$version") ; then 
    jvc_warn "julia-$version already exist in $JULIA_SYMLINK_DIR" 
  else
    if [ -e "$bin_julia" ]; then
      echo "Loading julia-$version"
      if ln -s "$bin_julia" "$JULIA_SYMLINK_DIR"/julia-"$version"; then
        jvc_done "Symlink julia-$version is ready to use." 
      fi
    else
      jvc_err "Directory $bin_julia does not exist."
      jvc_err "The corresponding version may not be installed."
      jvc installed 
    fi
  fi
}

jvc_unload() {
  local version
  version=$1
  if has_symlink_version "$version" ; then 
    rm "$JULIA_SYMLINK_DIR"/julia-"$version"
    jvc_done Symlink julia-"$version" has been removed from "$JULIA_SYMLINK_DIR"
  else
    jvc_warn "julia-$version is not loaded. No operation is performed."
    jvc_echo "(Check loaded versions using 'jvc loaded'.)"
  fi
}

jvc_installed_version() {
  command find "$JULIA_INSTALL_DIR" -maxdepth 1 -mindepth 1 -type d -name "julia-*"  \
    | command awk -F"$JULIA_INSTALL_DIR" '{print $2}' \
    | command awk -F"julia-" '{print $2}' | sort -r 
  }

# Fake check as only the directory is checked
jvc_has_version_installed() {
  local version
  version="$1"
  if [ -n "$(command find "$JULIA_INSTALL_DIR" -maxdepth 1 -mindepth 1 -type d -name "julia-$version")" ]; then
    return 0
  else 
    return 1
  fi
}

jvc_check_version_installed() {
  if ! jvc_has_version_installed "$1" ; then
    jvc_err "Input version $1 might not be installed"
    exit 9
  fi 
}

jvc_has_version_downloaded() {
  local version
  version="$1"
  if [ -n "$(command find "$JULIA_DOWNLOAD_DIR" -maxdepth 1 -mindepth 1 -type f -name "julia-$version.*")" ]; then
    return 0
  else 
    return 1
  fi
}


jvc_loaded_version() {
  # ls "$JULIA_SYMLINK_DIR" | grep julia- | cut -d "-" -f2- 
  # ls "$JULIA_SYMLINK_DIR"/julia-* | cut -d "-" -f2- 
  command find "$JULIA_SYMLINK_DIR" -maxdepth 1 -mindepth 1 -name "julia-*"  \
    | cut -d "-" -f2- | sort -r 
  }


jvc_downloaded_version() {
  cd "$JULIA_DOWNLOAD_DIR" || return 1
  ls julia-*   
}


jvc_purge() {
  jvc_echo "Note that the default julia symlink will not be purged."
  local loaded_version
  loaded_version=$(jvc_loaded_version)
  if [ -n "$loaded_version" ]; then
    jvc_echo The following version has been loaded:
    jvc_echo "$loaded_version" | awk '{print "  " $1}'
    if jvc_confirm2 "N" "Warning: the purge command will unload/remove all julia symbolic links? [y/N] " ;  then
      for version in $loaded_version
      do
        jvc_unload "$version"
        jvc_echo "julia-$version has been unloaded."
      done
    fi
  else
    jvc_warn "No Julia version is loaded. There is nothing to purge."
  fi
}

jvc_switch() {
  local version
  version=$1
  local installed_version
  installed_version=$(jvc_installed_version)
  jvc_check_version "$version" || return 9

  if ! jvc_has_version_installed "$version" ; then 
    jvc_err "Input version $version might not be installed"
    jvc_echo "Installed versions are:"
    jvc_installed_version
    exit 9
  fi

  if jvc_has_julia_installed; then
    local existing_version
    existing_version=$(command julia --version | cut -d " " -f3-) 
    if [ "$existing_version" = "$version" ]; then
      jvc_echo Your are already at version "$version" 
      jvc_echo No operation will be performed.
      return 
    fi
    echo Current 'julia' symlink has been selected as "$(command julia --version | cut -d " " -f3-)"
    if jvc_confirm2 "Y" "Do you want to switch to julia $version [Y/n] ? "; 
    then 
      ln -sf "$JULIA_INSTALL_DIR/julia-$version/bin/julia" "$JULIA_SYMLINK_DIR/julia"
      jvc_done  "'julia' alias has been selected as julia $version. " 
    fi
  else
    jvc_warn "No 'julia' alias is found."
    if jvc_confirm2 "Y" "Do you want to create the 'julia' alias and link to julia $version [Y/n] ? "; 
    then 
      ln -sf "$JULIA_INSTALL_DIR/julia-$version/bin/julia" "$JULIA_SYMLINK_DIR/julia"
      jvc_done  "'julia' alias has been selected as julia $version. " 
    fi
  fi
}

jvc_migrate() { 
  local objective
  objective="$@"
  local from_version
  local to_version
  from_version=$1
  to_version=$3
  local depot_path
  if [ -z "$JULIA_DEPOT_PATH" ]; then
    echo "JULIA_DEPOT_PATH not found, using ~/.julia by default" 
    depot_path="$HOME/.julia"
  else 
    depot_path=$JULIA_DEPOT_PATH # This might be a problem
  fi

  # Get ride of bashism
  # if [[ $objective == @([0-9].[0-9] to [0-9].[0-9]) ]]; then
  if echo "$objective" | grep -qE "^(0|[1-9]\d*)\.(0|[1-9]\d*)[[:space:]]to[[:space:]](0|[1-9]\d*)\.(0|[1-9]\d*)$"; then
    jvc_echo "Matching statement. Proceed for Project.toml comparison."
  else 
    jvc_echo "Wrong argument. Please check your inputs."
    exit 1
  fi
  # -y for GNU Diff gives two cols diff 
  # -c for POSIX Diff 
  # This might have to be changed depending on the popularity of GNU diff 
  # if diff -y --color  "$depot_path/environments/v$from_version/Project.toml" "$depot_path/environments/v$to_version/Project.toml"; then 
  if diff -c --color  "$depot_path/environments/v$from_version/Project.toml" "$depot_path/environments/v$to_version/Project.toml"; then 
    jvc_warn "No difference were found"
  fi
  jvc_echo "v$from_version Project.toml ===================> v$to_version Project.toml"
  if jvc_confirm2 "Y" "Continue to migrate Project.toml from v$from_version to v$to_version ? [Y/n] ";  then
    cp "$depot_path/environments/v$from_version/Project.toml" "$depot_path/environments/v$to_version/Project.toml"
    cp "$depot_path/environments/v$from_version/Manifest.toml" "$depot_path/environments/v$to_version/Manifest.toml"
    jvc_done "Migration completes." 
  fi
}


# $1: arch $2 sys $3: version
jvc_install_linux() {
  local version
  version="$1"
  local url
  url=$(jvc_get_url_from_sys_arch_version "$JVC_SYS" "$JVC_ARCH" "$version" "$JVC_SUFFIX")

  jvc_checkfolder install "$JULIA_INSTALL_DIR"

  if jvc_confirm2 "Y" "Continue to install Julia $version ? [Y/n] ";  then
    if jvc_has_version_installed "$version"; then
      jvc_warn "Installation folder for version $version directory exists"
      if jvc_confirm2 "Y" "Overwriting existing contents? [Y/n] "; then
        jvc_checkfolder download "$JULIA_DOWNLOAD_DIR"
        jvc_download_tarball "$url" "$version" 
        jvc_extract "$version"
        jvc_link "$version"
      fi

    else 
      jvc_checkfolder download "$JULIA_DOWNLOAD_DIR"
      jvc_download_tarball "$url" "$version" 
      mkdir "$JULIA_INSTALL_DIR"/julia-"$version"
      jvc_extract "$version"
      jvc_link "$version"
    fi
  fi 
  jvc_done "Installation done."
}


jvc_install_mac() {
  local version
  version="$1"
  local url
  url=$(jvc_get_url_from_sys_arch_version "$JVC_SYS" "$JVC_ARCH" "$version" "$JVC_SUFFIX")

  jvc_checkfolder install "$JULIA_INSTALL_DIR"

  if jvc_confirm2 "Y" "Continue to install Julia $version ? [Y/n] ";  then
    if jvc_has_version_installed "$version"; then
      jvc_warn "Installation folder for version $version directory exists"
      if jvc_confirm2 "Y" "Reinstall version $version ? [Y/n] "; then
        rm -rf "$JULIA_INSTALL_DIR/julia-$version"
        jvc_checkfolder download "$JULIA_DOWNLOAD_DIR"
        jvc_download_tarball "$url" "$version" 
        jvc_mount "$version"
        jvc_link_mac "$version"
      fi

    else 
      jvc_checkfolder download "$JULIA_DOWNLOAD_DIR"
      jvc_download_tarball "$url" "$version" 
      mkdir "$JULIA_INSTALL_DIR"/julia-"$version"
      jvc_mount "$version"
      jvc_link_mac "$version"
    fi
  fi 
  jvc_done "Installation done."
}


# $1: version  
jvc_download() {
  local version
  version="$1"
  url=$(jvc_get_url_from_sys_arch_version "$JVC_SYS" "$JVC_ARCH" "$version" "$JVC_SUFFIX")
  if jvc_confirm2 "Y" "Continue to download Julia $version ? [Y/n] ";  then
    jvc_checkfolder download "$JULIA_DOWNLOAD_DIR"
    jvc_download_tarball "$url" "$version" 
  fi
}


# jvc main
jvc() {
  jvc_get_sys_info 
  args=("$@")
  n_args=${#args[@]}

  case "$1" in 
    "-h"| "help" | "--help")
      jvc_echo "        Julia Version Control (v${JVC_VERSION})" 

      jvc_echo "Basic usage:"
      jvc_echo 
      jvc_echo "Julia installation"
      jvc_echo "  jvc install [<version>]"
      jvc_echo "  jvc install (Install the newest stable version)" 
      jvc_echo "  jvc install 1 (Install the newest major version 1)" 
      jvc_echo "  jvc install 1.5 (Install the newest major minor version 1.5)" 
      jvc_echo "  jvc install 1.5.3 (Install the exact version 1.5.3)" 
      jvc_echo "  jvc install 1.6.0 (Install the exact version 1.6.0)" 
      jvc_echo "  jvc install 1.6.0-rc1 (Install the exact version 1.6.0-rc1)" 
      jvc_echo "  jvc installed (List all installed)" 
      jvc_echo 
      jvc_echo "Julia download"
      jvc_echo "  jvc download [<version>]"
      jvc_echo
      jvc_echo "Install the nightly version"
      jvc_echo "  jvc nightly"
      jvc_echo 
      jvc_echo "Load a Julia version."
      jvc_echo "  jvc load [<version>]"
      jvc_echo "  This will make the corresponding version visible as julia-version."
      jvc_echo 
      jvc_echo "Unload a Julia version."
      jvc_echo "  jvc unload [<version>]"
      jvc_echo 
      jvc_echo "Purge a Julia version"
      jvc_echo "  jvc purge"
      jvc_echo "  This might be useful when you have too many julia-version symlink loaded." 
      jvc_echo 
      jvc_echo "Uninstall a Julia version" 
      jvc_echo "  jvc remove"
      jvc_echo "  jvc rm"
      jvc_echo "Note that the no version number is required. The installed version will be listed."
      jvc_echo 
      jvc_echo "Overview of installed, loaded, downloaded."
      jvc_echo "  jvc status" 
      jvc_echo "  jvc st" 
      jvc_echo 
      jvc_echo "Search for a specific version"
      jvc_echo "  jvc search [<version>]"
      jvc_echo 
      jvc_echo "List available version that can be installed."
      jvc_echo "  jvc avail" 
      jvc_echo "  jvc available" 
      jvc_echo "  jvc avail all (List all versions include rc and beta)"
      jvc_echo 
      jvc_echo "Search for a corresponding version." 
      jvc_echo "  jvc search [<version>]" 
      jvc_echo 
      jvc_echo "Pin to a specific version as julia"
      jvc_echo "  jvc switch [<version>]" 
      jvc_echo "  e.g., if you switch to 1.4.2, it will overwrite you julia symbolic link"
      jvc_echo
      jvc_echo "Migrate your Project.toml/Manifest.toml"
      jvc_echo "  jvc migrate [<major minor version>] to [<major minor version>]" 
      jvc_echo 
      jvc_echo "Change the upstream for downloading"
      jvc_echo "  jvc upstream" 
      ;;
    "install")
      shift
      local raw_version
      raw_version="${1-}"
      jvc_get_sys_info #JVC_SYS JVC_ARCH JVC_SUFFIX 
      jvc_get_version "$raw_version" 
      local version
      version="$INSTALLING_VER"

      case "$JVC_SYS" in
        "linux")
          jvc_install_linux "$version"
          ;;
        "mac")
          jvc_install_mac "$version"
      esac
      ;;
    "remove"|"rm")
      shift
      if [ -n "$1" ]; then
        jvc_warn "No version number is needed to specified"
      fi
      echo You have installed the following version:
      jvc_installed_version
      printf "Enter the version you would like to remove: "
      read -r rm_version 

      #if ! jvc_is_semver "$rm_version"; then
        #jvc_err "Not a valid version."; 
        #return 9
      #fi
      jvc_check_version "$rm_version" || exit 9
      jvc_check_version_installed "$rm_version"

      local rm_symlink
      rm_symlink=$JULIA_SYMLINK_DIR/julia-$rm_version
      local rm_bin
      rm_bin=$JULIA_INSTALL_DIR/julia-$rm_version

      if jvc_confirm2 "Y" "You are about remove $rm_version from $JULIA_INSTALL_DIR. [Y/n] " ;  then
        # TODO: verbose for remove 
        rm -rf  "$rm_bin" 
        [ -L "$rm_symlink" ] && rm -rf "$rm_symlink"
        jvc_done "Uninstallation done."
      fi
      ;;
    "download")
      shift
      local raw_version
      raw_version="${1-}"
      # Check version format
      jvc_get_sys_info 
      jvc_get_version "$raw_version" 
      local version
      version=$INSTALLING_VER
      jvc_download "$version" 

      ;;
    "load")
      #TODO: autocompletion from installed_list
      shift 
      jvc_check_null "$1" "version number is required for load argument" 
      local load_version="$1"
      jvc_check_version "$1" || return 9
      jvc_check_version_installed "$1" 
      jvc_load "$load_version" 
      ;;
    "unload")
      shift 
      jvc_check_null "$1" "version number is required for unload argument" 
      local unload_version=$1
      jvc_check_version "$1" || return 9
      jvc_unload "$unload_version"
      ;;
    "loaded")
      jvc_loaded_version
      ;;
    "status"|"st")
      echo ===================================
      echo "Installed version" "$JULIA_INSTALL_DIR"
      jvc_installed_version
      echo ===================================
      echo "Loaded version" "$JULIA_SYMLINK_DIR"
      jvc_loaded_version
      echo ===================================
      echo "Downloaded version" "$JULIA_DOWNLOAD_DIR"
      jvc_downloaded_version
      echo ===================================
      echo "Current upstream is $UPSTREAM_NAME"
      ;;
    "available"|"avail")
      shift
      case "$1" in
        "stable"|"")
          jvc_ls_stable  
          ;;
        "all")
          jvc_ls_all
          ;;
      esac
      ;;
    "search")
      # TODO: rewrite version search logic together with download/install 
      shift 
      jvc_get_version "$1"
      ;;
    "switch")
      # TODO Check if current julia symlink are maintained by jvc
      if jvc_has_julia_installed; then
        if [  "$(dirname $(command -v julia))" = "$JULIA_SYMLINK_DIR" ]; then
          #  Maintained
          shift
          jvc_check_null "$1" "version number is required for switch"
          local version=$1 
          if [ -n "$version" ]; then
            jvc_check_version "$1" || return 1
            jvc_switch "$version" 
          else
            jvc_err "Please input a valid version"
            jvc_echo "Available versions are:"
            jvc installed
          fi
        else 
          jvc_warn "Your current julia is not maintained by jvc."
          jvc_echo "Current julia directory is $(dirname "$(command -v julia)")"
          jvc_echo "This is incompatible with JULIA_SYMLINK_DIR=$JULIA_SYMLINK_DIR"
          jvc_echo "Manual intervention is required."
          if jvc_confirm2 "N" "Do you want to remove your $(command -v julia)? (y/N) ? "; then
            local old_julia_path
            old_julia_path="$(command -v julia)"
            if rm -i "$old_julia_path"; then
              jvc_done "$old_julia_path has been removed."
            else
              exit 7
            fi
            shift 
            jvc switch "$1"
          fi
        fi
      else 
        shift
        jvc_check_null "$1" "version number is required for switch"
        local version=$1 
        if [ -n "$version" ]; then
          jvc_check_version "$1" || return 1
          jvc_switch "$version" 
        else
          jvc_err "Please input a valid version"
          jvc_echo "Available versions are:"
          jvc installed
        fi
      fi
      ;;
    "nightly") 
      jvc_get_sys_info #JVC_SYS JVC_ARCH JVC_SUFFIX 
      [ ! "$UPSTREAM_NAME" = "Official" ]  && jvc_warn "Nightly release is only available for Official upstream."
      case "$JVC_SYS" in
        "linux")
          jvc_install_linux "nightly"
          ;;
        "darwin")
          jvc_install_mac "nightly"
      esac
      ;;
    "installed")
      echo List all Julia version installed 
      jvc_installed_version
      ;;
    "upstream")
      echo Current upstream is "$UPSTREAM_NAME"
      echo The available upstreams are: 
      local upstream_list
      upstream_list=$(jvc_get_upstream_list_local)
      local upstream_short=($(echo "${upstream_list[@]}" | awk -F[.:] '{print $1}'))
      jvc_split "$upstream_list" , upstream_menu
      unset 'upstream_menu[${#upstream_menu[@]}-1]'
      echo "${upstream_list[@]}" | awk -F[.:] '{print "  " NR ". " $1 ": " $2}'
      printf "Select your preferred upstream. (Enter number [1-%i]): "  "${#upstream_menu[@]}"
      read -r upstream_choice
      if echo "$upstream_choice" | grep -Eq "^([0-${#upstream_menu[@]}])$" ; then 
        local jvc_dir
        jvc_dir=$(dirname "$0")
        sed -i "s/UPSTREAM_NAME=.*/UPSTREAM_NAME=${upstream_short[$upstream_choice-1]}/" "$jvc_dir"/.jvcrc
        jvc_echo "Your upstream is switched to ${upstream_short[$upstream_choice-1]}."
      else
        jvc_echo "Aborted."
      fi
      ;;
    "purge")
      jvc_purge
      ;;
    "migrate")
      shift
      jvc_migrate "$1" "$2" "$3"
      ;;
    "version" | "-v" | "--version")
      jvc_echo "Julia Version Control (JVC) version $JVC_VERSION"
      jvc_echo "Author: Xiansong Xu (songxianxu@gmail.com)"
      ;;
    *) 
      jvc_warn Unsupported arguements. Check your input.
  esac
}

jvc "$@"

